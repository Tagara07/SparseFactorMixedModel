// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// sample_coefs_parallel_sparse_c
arma::mat sample_coefs_parallel_sparse_c(arma::mat Y, arma::mat W, arma::vec h2, arma::vec tot_Y_prec, arma::mat prior_mean, arma::mat prior_prec, List invert_aI_bZAZ, int grainSize);
RcppExport SEXP BSFG_sample_coefs_parallel_sparse_c(SEXP YSEXP, SEXP WSEXP, SEXP h2SEXP, SEXP tot_Y_precSEXP, SEXP prior_meanSEXP, SEXP prior_precSEXP, SEXP invert_aI_bZAZSEXP, SEXP grainSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tot_Y_prec(tot_Y_precSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type prior_mean(prior_meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type prior_prec(prior_precSEXP);
    Rcpp::traits::input_parameter< List >::type invert_aI_bZAZ(invert_aI_bZAZSEXP);
    Rcpp::traits::input_parameter< int >::type grainSize(grainSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_coefs_parallel_sparse_c(Y, W, h2, tot_Y_prec, prior_mean, prior_prec, invert_aI_bZAZ, grainSize));
    return rcpp_result_gen;
END_RCPP
}
// sample_tot_prec_sparse_c
arma::rowvec sample_tot_prec_sparse_c(arma::mat Y, arma::vec h2, double tot_Y_prec_shape, double tot_Y_prec_rate, List invert_aI_bZAZ);
RcppExport SEXP BSFG_sample_tot_prec_sparse_c(SEXP YSEXP, SEXP h2SEXP, SEXP tot_Y_prec_shapeSEXP, SEXP tot_Y_prec_rateSEXP, SEXP invert_aI_bZAZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< double >::type tot_Y_prec_shape(tot_Y_prec_shapeSEXP);
    Rcpp::traits::input_parameter< double >::type tot_Y_prec_rate(tot_Y_prec_rateSEXP);
    Rcpp::traits::input_parameter< List >::type invert_aI_bZAZ(invert_aI_bZAZSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_tot_prec_sparse_c(Y, h2, tot_Y_prec_shape, tot_Y_prec_rate, invert_aI_bZAZ));
    return rcpp_result_gen;
END_RCPP
}
// sample_h2s_discrete_given_p_sparse_c
arma::rowvec sample_h2s_discrete_given_p_sparse_c(arma::mat Y, int h2_divisions, arma::vec h2_priors, arma::vec Tot_prec, List invert_aI_bZAZ);
RcppExport SEXP BSFG_sample_h2s_discrete_given_p_sparse_c(SEXP YSEXP, SEXP h2_divisionsSEXP, SEXP h2_priorsSEXP, SEXP Tot_precSEXP, SEXP invert_aI_bZAZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type h2_divisions(h2_divisionsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type h2_priors(h2_priorsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Tot_prec(Tot_precSEXP);
    Rcpp::traits::input_parameter< List >::type invert_aI_bZAZ(invert_aI_bZAZSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_h2s_discrete_given_p_sparse_c(Y, h2_divisions, h2_priors, Tot_prec, invert_aI_bZAZ));
    return rcpp_result_gen;
END_RCPP
}
// sample_randomEffects_parallel_sparse_c
arma::mat sample_randomEffects_parallel_sparse_c(arma::mat Y, arma::sp_mat Z, arma::vec tot_prec, arma::vec h2, List invert_aZZt_Ainv, int grainSize);
RcppExport SEXP BSFG_sample_randomEffects_parallel_sparse_c(SEXP YSEXP, SEXP ZSEXP, SEXP tot_precSEXP, SEXP h2SEXP, SEXP invert_aZZt_AinvSEXP, SEXP grainSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tot_prec(tot_precSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< List >::type invert_aZZt_Ainv(invert_aZZt_AinvSEXP);
    Rcpp::traits::input_parameter< int >::type grainSize(grainSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_randomEffects_parallel_sparse_c(Y, Z, tot_prec, h2, invert_aZZt_Ainv, grainSize));
    return rcpp_result_gen;
END_RCPP
}
// sample_means_parallel_c
arma::mat sample_means_parallel_c(arma::mat Y_tilde, arma::vec resid_Y_prec, arma::vec E_a_prec, List invert_aA_bZtZ, int grainSize);
RcppExport SEXP BSFG_sample_means_parallel_c(SEXP Y_tildeSEXP, SEXP resid_Y_precSEXP, SEXP E_a_precSEXP, SEXP invert_aA_bZtZSEXP, SEXP grainSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y_tilde(Y_tildeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type resid_Y_prec(resid_Y_precSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type E_a_prec(E_a_precSEXP);
    Rcpp::traits::input_parameter< List >::type invert_aA_bZtZ(invert_aA_bZtZSEXP);
    Rcpp::traits::input_parameter< int >::type grainSize(grainSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_means_parallel_c(Y_tilde, resid_Y_prec, E_a_prec, invert_aA_bZtZ, grainSize));
    return rcpp_result_gen;
END_RCPP
}
// sample_factors_scores_sparse_c
arma::mat sample_factors_scores_sparse_c(arma::mat Y_tilde, arma::sp_mat Z, arma::mat Lambda, arma::vec resid_Y_prec, arma::mat F_a, arma::vec F_e_prec);
RcppExport SEXP BSFG_sample_factors_scores_sparse_c(SEXP Y_tildeSEXP, SEXP ZSEXP, SEXP LambdaSEXP, SEXP resid_Y_precSEXP, SEXP F_aSEXP, SEXP F_e_precSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y_tilde(Y_tildeSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type resid_Y_prec(resid_Y_precSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type F_a(F_aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type F_e_prec(F_e_precSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_factors_scores_sparse_c(Y_tilde, Z, Lambda, resid_Y_prec, F_a, F_e_prec));
    return rcpp_result_gen;
END_RCPP
}
// GSVD_2_c
List GSVD_2_c(arma::mat A, arma::mat B);
RcppExport SEXP BSFG_GSVD_2_c(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(GSVD_2_c(A, B));
    return rcpp_result_gen;
END_RCPP
}
// sample_delta_c
arma::rowvec sample_delta_c(arma::vec delta, arma::vec tauh, arma::mat Lambda_prec, double delta_1_shape, double delta_1_rate, double delta_2_shape, double delta_2_rate, arma::mat Lambda2, int times);
RcppExport SEXP BSFG_sample_delta_c(SEXP deltaSEXP, SEXP tauhSEXP, SEXP Lambda_precSEXP, SEXP delta_1_shapeSEXP, SEXP delta_1_rateSEXP, SEXP delta_2_shapeSEXP, SEXP delta_2_rateSEXP, SEXP Lambda2SEXP, SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type tauh(tauhSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Lambda_prec(Lambda_precSEXP);
    Rcpp::traits::input_parameter< double >::type delta_1_shape(delta_1_shapeSEXP);
    Rcpp::traits::input_parameter< double >::type delta_1_rate(delta_1_rateSEXP);
    Rcpp::traits::input_parameter< double >::type delta_2_shape(delta_2_shapeSEXP);
    Rcpp::traits::input_parameter< double >::type delta_2_rate(delta_2_rateSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Lambda2(Lambda2SEXP);
    Rcpp::traits::input_parameter< int >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_delta_c(delta, tauh, Lambda_prec, delta_1_shape, delta_1_rate, delta_2_shape, delta_2_rate, Lambda2, times));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello
List rcpp_hello();
RcppExport SEXP BSFG_rcpp_hello() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello());
    return rcpp_result_gen;
END_RCPP
}
