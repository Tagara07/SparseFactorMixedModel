cAs
chol(As)
expand(Cholesky(As))
cAs = chol(As)
expand(update(Cholesky(As),2*As))
a=expand(Cholesky(As))
a
a$P
solve(a$P)
solve(a$P) - t(a$P)
sl = solve(a$L)
sl
a$Li = solve(a$L)
with(a,t(P %*% L %*% t(L) %*% P))
As
with(a,t(P) %*% L %*% t(L) %*% P)
with(a,t(P) %*% Li %*% t(Li) %*% P)
solve(As)
with(a,(P) %*% Li %*% t(Li) %*% t(P))
with(a,solve(P) %*% Li %*% t(Li) %*% solve(t(P)))
cAs
det(cAs)
sum(diag(cAs))
prod(diag(cAs))
det(solve(cAs))
1/prod(diag(cAs))
formula
lm
get_all_vars
?get_all_vars
formula = ~A+B
get_all_vars(formula)
formula[[1]]
formula[1]
formula[2]
formula[3]
get_all_vars(formula[2])
?model.matrix(formula)
names(formula[2])
?formula
terms(formula[2])
formula[2]
formula[[2]]
terms(formula[[2]])
is(formula[[2]])
formula[[2]][1]
formula[[2]][2]
formula[[2]][2]
formula[[2]][[2]]
formula[[2]][[3]]
length(formula[[2]])
?expand.grid
expand.grid(1:2,1:3,1:4)
RE_names = c('A','B','C')
run_parameters$discrete_divisions = 5
discreteVariances = expand.grid(sapply(RE_names,function(re) 0:run_parameters$discrete_divisons))
run_parameters$discrete_divisons
run_parameters$discrete_divisions
discreteVariances = expand.grid(sapply(RE_names,function(re) 0:run_parameters$discrete_divisions))
discreteVariances
discreteVariances = expand.grid(lapply(RE_names,function(re) 0:run_parameters$discrete_divisions))
discreteVariances
head(discreteVariances)
colnames(discreteVariances) = RE_names
discreteVariances = discreteVariances[rowSums(discreteVariances) < 1,]
discreteVariances
discreteVariances = expand.grid(lapply(RE_names,function(re) 0:run_parameters$discrete_divisions)) / run_parameters$discrete_divisions
colnames(discreteVariances) = RE_names
discreteVariances = discreteVariances[rowSums(discreteVariances) < 1,]
discreteVariances
discreteVariances[order(discreteVariances[,1], discreteVariances[,2], discreteVariances[,3]),]
k=10
tot_F_prec = with(priors,rgamma(k,shape = tot_F_prec_shape,rate = tot_F_prec_rate))
F_discrete_variances = discreteVariances[sample(1:nrow(discreteVariances),k,replace=T),]
F_discrete_variances
A = matrix(rnorm(5*5),5);A =A %*% t(A); A = Matrix(A,sparse=T)
A
cA = chol(A)
cA_inv = solve(cA)
t(cA_inv) %*% cA_inv %*% A
(cA_inv) %*% t(cA_inv) %*% A
det(cA_inv)
det(A)
prod(diag(cA))
prod(diag(cA))^2
det(A)^(-1/2)
det(cA_inv)
h2_divisions
h2_divisions = expand.grid(lapply(RE_names,function(re) 0:run_parameters$discrete_divisions)) / run_parameters$discrete_divisions#
    colnames(h2_divisions) = RE_names#
    h2_divisions = h2_divisions[rowSums(h2_divisions) < 1,]
h2_divisions
data = data.frame(A=gl(5,3))
data
Z= model.matrix(~0+Z,data)
Z
Z= model.matrix(~0+A,data)
Z
A = matrix(rnorm(5*5),5);A = A %*% t(A)
S = matrix(rnorm(15*15),15);S = S %*% t(S)
Stot = S + A
Stot = S + Z %*% A %*% t(Z)
Stot_inv = solve(Stot)
Sinv = solve(S)
S %*% (Sinv - Stot_inv) %*% S
S %*% (Sinv - Stot_inv) %*% S - Z %*% A %*% t(Z)
target = t(Z) %*% Sinv %*% Z + solve(A)
S %*% (Sinv - Stot_inv) %*% S - Z %*% target %*% t(Z)
Stot_inv - Sinv - Sinv %*% Z %*% target %*% t(Z) %*% Sinv
target = solve(t(Z) %*% Sinv %*% Z + solve(A))
Stot_inv - Sinv - Sinv %*% Z %*% target %*% t(Z) %*% Sinv
Sinv - Sinv %*% Z %*% target %*% t(Z) %*% Sinv
Stot_inv - (Sinv - Sinv %*% Z %*% target %*% t(Z) %*% Sinv)
S %*% (Sinv - Stot_inv) %*% S - Z %*% target %*% t(Z)
library(corpcor)
Zinv = pinv(Z)
Zinv %*% S %*% (Sinv - Stot_inv) %*% S %*% t(Zinv) - target
library(Matrix)#
n = 200#
A1 = sapply(1:5,function(x) sample(c(0,1),length=n,prob = c(.1,.9),replace=T))
A1 = sapply(1:5,function(x) sample(c(0,1),size=n,prob = c(.1,.9),replace=T))
colSums(A1)
library(Matrix)#
n = 200#
A1 = sapply(1:5,function(x) sample(c(0,1),size=n,prob = c(.9,.1),replace=T)); A1 = A1 %*% t(A1)#
A2 = sapply(1:5,function(x) sample(c(0,1),size=n,prob = c(.9,.1),replace=T)); A2 = A2 %*% t(A2)
all(A1 == t(A1))
mean(A1==0)
?backsolve
library(SparseM)
?backsolve
library(Matrix)#
library(SparseM)#
n = 200#
A1 = sapply(1:5,function(x) sample(c(0,1),size=n,prob = c(.9,.1),replace=T)); A1 = A1 %*% t(A1)#
A2 = sapply(1:5,function(x) sample(c(0,1),size=n,prob = c(.9,.1),replace=T)); A2 = A2 %*% t(A2)#
#
x = rnorm(n)#
#
solve1 = function(A,x){#
    solve(A) %*% x#
}#
solve2 = function(A,x) {#
    solve(A,x)#
}#
solve3 = function(cA,x) {#
    x_star = backsolve(cA,x)#
    forwardsolve(cA,x_star)#
}#
solve4 = function(cA,x) {#
    x_star = solve(cA,x)#
    solve(t(cX),x)#
}
A = A1+A2
library(microbenchmark)
library(Matrix)#
library(SparseM)#
library(microbenchmark)#
n = 200#
A1 = sapply(1:5,function(x) sample(c(0,1),size=n,prob = c(.9,.1),replace=T)); A1 = A1 %*% t(A1)#
A2 = sapply(1:5,function(x) sample(c(0,1),size=n,prob = c(.9,.1),replace=T)); A2 = A2 %*% t(A2)#
A = A1+A2#
#
x = rnorm(n)#
#
solve1 = function(A,x){#
    solve(A) %*% x#
}#
solve2 = function(A,x) {#
    solve(A,x)#
}#
solve3 = function(cA,x) {#
    x_star = backsolve(cA,x)#
    forwardsolve(cA,x_star)#
}#
solve4 = function(cA,x) {#
    x_star = solve(cA,x)#
    solve(t(cX),x)#
}#
solve1(A,x) - solve2(A,x)
library(Matrix)#
library(SparseM)#
library(microbenchmark)#
n = 200#
A1 = sapply(1:5,function(x) sample(c(0,1),size=n,prob = c(.9,.1),replace=T)); A1 = A1 %*% t(A1) + diag(1,n)#
A2 = sapply(1:5,function(x) sample(c(0,1),size=n,prob = c(.9,.1),replace=T)); A2 = A2 %*% t(A2) + diag(1,n#
A = A1+A2
library(Matrix)#
library(SparseM)#
library(microbenchmark)#
n = 200#
A1 = sapply(1:5,function(x) sample(c(0,1),size=n,prob = c(.9,.1),replace=T)); A1 = A1 %*% t(A1) + diag(1,n)#
A2 = sapply(1:5,function(x) sample(c(0,1),size=n,prob = c(.9,.1),replace=T)); A2 = A2 %*% t(A2) + diag(1,n)#
A = A1+A2#
#
x = rnorm(n)#
#
solve1 = function(A,x){#
    solve(A) %*% x#
}#
solve2 = function(A,x) {#
    solve(A,x)#
}#
solve3 = function(cA,x) {#
    x_star = backsolve(cA,x)#
    forwardsolve(cA,x_star)#
}#
solve4 = function(cA,x) {#
    x_star = solve(cA,x)#
    solve(t(cX),x)#
}#
solve1(A,x) - solve2(A,x)
max(abs(solve1(A,x) - solve2(A,x)))#
max(abs(solve1(A,x) - solve3(A,x)))#
max(abs(solve1(A,x) - solve4(A,x)))
cA = chol(Matrix(A))
max(abs(solve1(A,x) - solve3(A,x)))
max(abs(solve1(A,x) - solve4(A,x)))
x_star = solve(cA,x)
dim(cA)
dim(A)
dim(x)
length(x)
length(x_star)
solve(t(cX),x_star)
dim(x_star)
solve(t(cX),c(x_star))
c(x_star)
is(x_star)
solve(t(cX),as.matrix(x_star))
as.matrix(x_star)
solve3 = function(cA,x) {#
    x_star = forwardsolve(cA,x)#
    backsolve(cA,x_star)#
}#
solve4 = function(cA,x) {#
    x_star = solve(cA,x)#
    solve(t(cX),as.matrix(x_star))#
}#
cA = chol(Matrix(A))#
#
max(abs(solve1(A,x) - solve2(A,x)))#
max(abs(solve1(A,x) - solve3(A,x)))#
max(abs(solve1(A,x) - solve4(A,x)))
is(cA)
solve3 = function(cA,x) {#
    x_star = forwardsolve(cA,x)#
    backsolve(cA,forwardsolve(cA,x))#
}#
solve4 = function(cA,x) {#
    x_star = solve(cA,x)#
    solve(t(cX),as.matrix(x_star))#
}#
cA = chol(Matrix(A))#
#
max(abs(solve1(A,x) - solve2(A,x)))#
max(abs(solve1(A,x) - solve3(A,x)))
cA = SparseM:chol(Matrix(A))
cA = SparseM::chol(Matrix(A))
cA = SparseM::chol(Matrix(A))
max(abs(solve1(A,x) - solve3(A,x)))
is(cA)
cA = SparseM::chol(as.matrix.csr(A))
is(cA)
max(abs(solve1(A,x) - solve3(A,x)))
cA = SparseM::chol(A)
max(abs(solve1(A,x) - solve3(A,x)))
solve3 = function(cA,x) {#
    x_star = forwardsolve(cA,x)#
    backsolve(cA,forwardsolve(cA,x),twice=F)#
}#
solve4 = function(cA,x) {#
    x_star = solve(cA,x)#
    solve(t(cX),as.matrix(x_star))#
}#
cA = SparseM::chol(A)#
#
max(abs(solve1(A,x) - solve2(A,x)))#
max(abs(solve1(A,x) - solve3(A,x)))#
max(abs(solve1(A,x) - solve4(A,x)))
cA1 = SparseM::chol(A)
max(abs(solve1(A,x) - solve3(cA1,x)))
max(abs(solve1(A,x) - solve4(cA,x)))
library(Matrix)#
library(SparseM)#
library(microbenchmark)#
n = 200#
A1 = sapply(1:5,function(x) sample(c(0,1),size=n,prob = c(.9,.1),replace=T)); A1 = A1 %*% t(A1) + diag(1,n)#
A2 = sapply(1:5,function(x) sample(c(0,1),size=n,prob = c(.9,.1),replace=T)); A2 = A2 %*% t(A2) + diag(1,n)#
A = A1+A2#
#
x = rnorm(n)#
#
solve1 = function(A,x){#
    solve(A) %*% x#
}#
solve2 = function(A,x) {#
    solve(A,x)#
}#
solve3 = function(cA,x) {#
    x_star = forwardsolve(cA,x)#
    backsolve(cA,forwardsolve(cA,x),twice=F)#
}#
solve4 = function(cA,x) {#
    x_star = solve(cA,x)#
    solve(t(cX),as.matrix(x_star))#
}#
cA1 = SparseM::chol(A)#
cA2 = chol(Matrix(A))#
#
max(abs(solve1(A,x) - solve2(A,x)))#
max(abs(solve1(A,x) - solve3(cA1,x)))#
max(abs(solve1(A,x) - solve4(cA2,x)))
solve5 = function(cA,x) {#
    cAi = solve(cA)#
    Ai - cAi %*% t(cAi)#
    Ai %*% x#
}#
cA1 = SparseM::chol(A)#
cA2 = chol(Matrix(A))#
#
max(abs(solve1(A,x) - solve2(A,x)))#
max(abs(solve1(A,x) - solve3(cA1,x)))#
max(abs(solve1(A,x) - solve4(cA2,x)))#
max(abs(solve1(A,x) - solve5(cA2,x)))
solve5 = function(cA,x) {#
    cAi = solve(cA)#
    Ai = cAi %*% t(cAi)#
    Ai %*% x#
}#
cA1 = SparseM::chol(A)#
cA2 = chol(Matrix(A))#
#
max(abs(solve1(A,x) - solve2(A,x)))#
max(abs(solve1(A,x) - solve3(cA1,x)))#
max(abs(solve1(A,x) - solve4(cA2,x)))#
max(abs(solve1(A,x) - solve5(cA2,x)))
solve4 = function(cA,x) {#
    x_star = c(as.matrix(solve(cA,x)))#
    solve(t(cX),x_star)#
}#
solve5 = function(cA,x) {#
    cAi = solve(cA)#
    Ai = cAi %*% t(cAi)#
    Ai %*% x#
}#
cA1 = SparseM::chol(A)#
cA2 = chol(Matrix(A))#
#
max(abs(solve1(A,x) - solve2(A,x)))#
max(abs(solve1(A,x) - solve3(cA1,x)))#
max(abs(solve1(A,x) - solve4(cA2,x)))#
max(abs(solve1(A,x) - solve5(cA2,x)))
x_star = c(as.matrix(solve(cA,x)))
length(x_star)
x_star
solve4 = function(cA,x) {#
    x_star = c(as.matrix(solve(cA,x)))#
    solve(t(cA),x_star)#
}#
solve5 = function(cA,x) {#
    cAi = solve(cA)#
    Ai = cAi %*% t(cAi)#
    Ai %*% x#
}#
cA1 = SparseM::chol(A)#
cA2 = chol(Matrix(A))#
#
max(abs(solve1(A,x) - solve2(A,x)))#
max(abs(solve1(A,x) - solve3(cA1,x)))#
max(abs(solve1(A,x) - solve4(cA2,x)))#
max(abs(solve1(A,x) - solve5(cA2,x)))
solve4 = function(cA,x) {#
    x_star = c(as.matrix(solve(t(cA),x)))#
    solve((cA),x_star)#
}#
solve5 = function(cA,x) {#
    cAi = solve(cA)#
    Ai = cAi %*% t(cAi)#
    Ai %*% x#
}#
cA1 = SparseM::chol(A)#
cA2 = chol(Matrix(A))#
#
max(abs(solve1(A,x) - solve2(A,x)))#
max(abs(solve1(A,x) - solve3(cA1,x)))#
max(abs(solve1(A,x) - solve4(cA2,x)))#
max(abs(solve1(A,x) - solve5(cA2,x)))
solve3 = function(cA,x) {#
    x_star = forwardsolve(cA,x)#
    forwardsolve(cA,backsolve(cA,x),twice=F)#
}#
solve4 = function(cA,x) {#
    x_star = c(as.matrix(solve(t(cA),x)))#
    solve((cA),x_star)#
}#
solve5 = function(cA,x) {#
    cAi = solve(cA)#
    Ai = cAi %*% t(cAi)#
    Ai %*% x#
}#
cA1 = SparseM::chol(A)#
cA2 = chol(Matrix(A))#
#
max(abs(solve1(A,x) - solve2(A,x)))#
max(abs(solve1(A,x) - solve3(cA1,x)))#
max(abs(solve1(A,x) - solve4(cA2,x)))#
max(abs(solve1(A,x) - solve5(cA2,x)))
solve3 = function(cA,x) {#
    x_star = forwardsolve(cA,x)#
    forwardsolve(cA,backsolve(cA,x,twice=F))#
}#
solve4 = function(cA,x) {#
    x_star = c(as.matrix(solve(t(cA),x)))#
    solve((cA),x_star)#
}#
solve5 = function(cA,x) {#
    cAi = solve(cA)#
    Ai = cAi %*% t(cAi)#
    Ai %*% x#
}#
cA1 = SparseM::chol(A)#
cA2 = chol(Matrix(A))#
#
max(abs(solve1(A,x) - solve2(A,x)))#
max(abs(solve1(A,x) - solve3(cA1,x)))#
max(abs(solve1(A,x) - solve4(cA2,x)))#
max(abs(solve1(A,x) - solve5(cA2,x)))
solve3 = function(cA,x) {#
    x_star = forwardsolve(cA,x)#
    forwardsolve(cA,backsolve(cA,x))#
}#
solve4 = function(cA,x) {#
    x_star = c(as.matrix(solve(t(cA),x)))#
    solve((cA),x_star)#
}#
solve5 = function(cA,x) {#
    cAi = solve(cA)#
    Ai = cAi %*% t(cAi)#
    Ai %*% x#
}#
cA1 = SparseM::chol(A)#
cA2 = chol(Matrix(A))#
#
max(abs(solve1(A,x) - solve2(A,x)))#
max(abs(solve1(A,x) - solve3(cA1,x)))#
max(abs(solve1(A,x) - solve4(cA2,x)))#
max(abs(solve1(A,x) - solve5(cA2,x)))
microbenchmark(solve1(A,x),solve2(A,x),solve4(cA2,x),solve5(cA2,x))
solve5 = function(cAi,x) {#
    Ai = cAi %*% t(cAi)#
    Ai %*% x#
}#
cA1 = SparseM::chol(A)#
cA2 = chol(Matrix(A))#
cA2i = solve(cA2)#
#
max(abs(solve1(A,x) - solve2(A,x)))#
max(abs(solve1(A,x) - solve3(cA1,x)))#
max(abs(solve1(A,x) - solve4(cA2,x)))#
max(abs(solve1(A,x) - solve5(cA2i,x)))
microbenchmark(solve1(A,x),solve2(A,x),solve4(cA2,x),solve5(cA2,x))
solve
?solve
cA3 = Cholesky(Matrix(A))
solve6 = function(cA,x) {#
    solve(cA,x)#
}#
cA1 = SparseM::chol(A)#
cA2 = chol(Matrix(A))#
cA2i = solve(cA2)#
cA3 = Cholesky(Matrix(A))#
#
max(abs(solve1(A,x) - solve2(A,x)))#
max(abs(solve1(A,x) - solve3(cA1,x)))#
max(abs(solve1(A,x) - solve4(cA2,x)))#
max(abs(solve1(A,x) - solve5(cA2i,x)))#
max(abs(solve1(A,x) - solve6(cA3,x)))
microbenchmark(solve1(A,x),solve2(A,x),solve4(cA2,x),solve5(cA2,x),solve6(cA3,x))
As = Matrix(A,sparse=T)
microbenchmark(chol(10*As),update(cA3,10*As))
setwd("/Users/der7/Box Sync/DER_projects/BSFG/test_MM")
library(Matrix)#
library(SparseM)#
library(microbenchmark)#
library(Rcpp)#
library(RcppArmadillo)#
sourceCpp('MME_solve.cpp'
)
sourceCpp('MME_solve.cpp')
sourceCpp('MME_solve.cpp')
sourceCpp('MME_solve.cpp')
sourceCpp('MME_solve.cpp')
max(abs(solve1(A,x) - solve_sp_c(cA2,x)))
sourceCpp('MME_solve.cpp')
max(abs(solve1(A,x) - solve_sp_c(cA2,x)))
sourceCpp('MME_solve.cpp')
max(abs(solve1(A,x) - solve_c(cA2,x)))
cA = chol(A)
max(abs(solve1(A,x) - solve_c(cA,x)))
max(abs(solve1(A,x) - solve_c(t(cA),x)))
sourceCpp('MME_solve.cpp')
max(abs(solve1(A,x) - solve_c(cA,x)))
max(abs(solve1(A,x) - solve_c(t(cA),x)))
max(abs(solve1(A,x) - solve_c(cA,x)))
microbenchmark(solve1(A,x),solve2(A,x),solve4(cA2,x),solve5(cA2,x),solve6(cA3,x),solve_c(cA,x))
sourceCpp('MME_solve.cpp')
microbenchmark(solve1(A,x),solve2(A,x),solve4(cA2,x),solve5(cA2,x),solve6(cA3,x),solve_c(cA,x))
sourceCpp('MME_solve.cpp')
max(abs(solve1(A,x) - solve_c(cA,x)))
microbenchmark(solve1(A,x),solve2(A,x),solve4(cA2,x),solve5(cA2,x),solve6(cA3,x),solve_c(cA,x))
A1s = Matrix(A1,sparse=T)
max(abs(solve4(chol(10*As1),x) - solve6(update(cA3,10*A1s),x)))
max(abs(solve4(chol(10*A1s),x) - solve6(update(cA3,10*A1s),x)))
microbenchmark(solve4(chol(10*A1s),x),solve6(update(cA3,10*A1s),x)))
microbenchmark(solve4(chol(10*A1s),x),solve6(update(cA3,10*A1s),x))
det(A1s)
det(update(cA3,10*A1s))
det(update(cA3,A1s))
det(update(cA3,A1s))^2
microbenchmark(det(A1s),det(update(cA3,10*A1s),x))^2)
microbenchmark(det(A1s),det(update(cA3,10*A1s),x)^2)
microbenchmark(det(A1s),det(update(cA3,A1s),x)^2)
microbenchmark(det(As),det(update(cA3,As),x)^2)
As
?Matrix
As + diagonalMatrix(10,n)
Diagonal(10,3)
Diagonal(3,10)
microbenchmark(A+diag(10,n))
microbenchmark(A+diag(10,n),As + Diagonal(n,10))
all(A + diag(10,n) == As + Diagonal(n,10))
diag(A)
Diagonal(As)
diag(As)
diag(As) = diag(As) + 10
diag(As) = diag(As) - 10
A2 = A + diag(10,n)
A2s = As
diag(A2s) = diag(As)+10
microbenchmark(A+diag(10,n),diag(A2s) = diag(As)+10)
microbenchmark(A+diag(10,n),{diag(A2s) = diag(As)+10})
microbenchmark(A+diag(10,n),{diag(A2s) = diag(As)+10})
microbenchmark(A+diag(10,n),{diag(A2s) = diag(As)+10})
microbenchmark({A2=A+diag(10,n)},{diag(A2s) = diag(As)+10})
n
diag(10,n)
all(A + diag(10,n) == As + diag(10,n))
microbenchmark(A + diag(10,n),As + diag(10,n))
? crossprod
